<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="iibs_abs" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">E:\worktools\apache-jmeter-5.1.1\lib\oceanbase-client-1.1.5.jar,E:\worktools\apache-jmeter-5.1.1\lib,E:\worktools\apache-jmeter-5.1.1\lib\myjar</stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">agent_mysql</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?allowMultiQueries=true</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">agent_mysql</stringProp>
        <stringProp name="password">agent_mysql</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">10.20.159.72</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8049</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db" elementType="Argument">
            <stringProp name="Argument.name">db</stringProp>
            <stringProp name="Argument.value">agent_mysql</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="csv" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="csv_json_path_10" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_10</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900010.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_02" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_02</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900002.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_03" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_03</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900003.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_83" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_83</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900083.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_80" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_80</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900080.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_85" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_85</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900085.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_86" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_86</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900086.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_04" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_04</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900004.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_08" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_08</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900008.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_11" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_11</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900011.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_12" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_12</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900012.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_84" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_84</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900084.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_15" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_15</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900015.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_16" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_16</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900016.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_41" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_41</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900041.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_42" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_42</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900042.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_43" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_43</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900043.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_68" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_68</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900068.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_71" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_71</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900071.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_17" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_17</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900017.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_61" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_61</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901061.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_62" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_62</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901062.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_63" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_63</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901063.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_64" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_64</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901064.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_65" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_65</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901065.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_82" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_82</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900082.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_101" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_101</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901101.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_102" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_102</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901102.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_json_path_103" elementType="Argument">
            <stringProp name="Argument.name">csv_json_path_103</stringProp>
            <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/901103.csv</stringProp>
            <stringProp name="Argument.desc">csv接口路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="服务启停_900001" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1540176265000</longProp>
        <longProp name="ThreadGroup.end_time">1540176265000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900001请求" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
			&quot;head&quot;: {&#xd;
&quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190410&quot;,&#xd;
        &quot;globalSerial&quot;: &quot;20200512000000008&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;71762557400175&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;944403&quot;,&#xd;
        &quot;productCode&quot;: &quot;P033000002&quot;,&#xd;
        &quot;busiNo&quot;: &quot;033000002000001&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;bankNo&quot;: &quot;255001&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;,&#xd;
        &quot;${db}head&quot;: &quot;1&quot;,&#xd;
        &quot;apphead&quot;: &quot;&quot;&#xd;
			},&#xd;
      &quot;body&quot;: {&quot;startStopFlag&quot;:&quot;0&quot;,&quot;appId&quot;:&quot;001&quot;,&quot;transCode&quot;:&quot;900002&quot;} &#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900001</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC 预处理程序" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="query">update ABS_TRANS set START_STOP_FLAG=&apos;0&apos; where TRANS_CODE=&apos;900002&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="6271722">&quot;respCode&quot;:&quot;00000&quot;,&quot;respMsg&quot;:&quot;交易成功</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>2</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="产品服务启停_900010" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900010" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="csv_json_path_10" elementType="Argument">
                <stringProp name="Argument.name">csv_json_path_10</stringProp>
                <stringProp name="Argument.value">F:/iibs/国产化验证/abs_csv/900010.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_10&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900010请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900010&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: ${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900010</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="194423416">&quot;respCode&quot;:&quot;00000&quot;,&quot;respMsg&quot;:&quot;交易成功&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="应用启停_900002" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900002" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_02&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900002请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900002&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="渠道启停_900003" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900003" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_03&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900003请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900003&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/flowservice/json/flow_abs_900003</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="产品启停_900083" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900083" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_83&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${productCode}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
String querypreStatus = query_PreResult.get(&quot;status&quot;);
vars.put(&quot;querypreStatus&quot;,querypreStatus);
log.info(querypreStatus);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900083请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900083&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900083</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${productCode}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">post_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">HashMap queryPostresult = vars.getObject(&quot;post_result&quot;).get(0);
String querypostStatus = queryPostresult.get(&quot;status&quot;);
if (&quot;${respCode}&quot;.equals(&quot;00000&quot;)){
if(vars.get(&quot;startStopFlag&quot;).equals(querypostStatus))
{

	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
}
}
else{
	if(vars.get(&quot;querypreStatus&quot;).equals(querypostStatus))
	{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

	}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
	}
}


</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="业务启停_900080" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900080" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_80&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${busiNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
String querypreStatus = query_PreResult.get(&quot;protocol_status&quot;);
vars.put(&quot;querypreStatus&quot;,querypreStatus);
log.info(querypreStatus);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900080请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900080&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/flowservice/json/flow_abs_900080</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${busiNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">post_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">HashMap queryPostresult = vars.getObject(&quot;post_result&quot;).get(0);
String querypostStatus = queryPostresult.get(&quot;protocol_status&quot;);
if (&quot;${respCode}&quot;.equals(&quot;00000&quot;)){
if(vars.get(&quot;startStopFlag&quot;).equals(querypostStatus))
{

	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
}
}
else{
	if(vars.get(&quot;querypreStatus&quot;).equals(querypostStatus))
	{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

	}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
	}
}


</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="信息获取_900085" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">14</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900085" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="前置脚本组报文体" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_85&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)),&quot;UTF-8&quot;);

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else if (&quot;ctrlFlag&quot;.equals(clist.get(i))){
					vars.put(clist.get(i),retval);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_head = JSON.toJSONString(json);
log.info(&quot;req_head的结果是：&quot; + req_head);
vars.put(&quot;req_head&quot;,req_head);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900085请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: ${req_head},&#xd;
       &quot;body&quot;: {&#xd;
      	&quot;ctrlFlag&quot;: ${ctrlFlag},&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900085</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="参数初始化_900086" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900086" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_86&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900086请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900086&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900086</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;result</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">yq_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
String resp_result = vars.get(&quot;result&quot;);
JSONObject resp_json = JSONObject.parseObject(resp_result);
String resp_size=resp_json.size().toString();
if(resp_size.equals(vars.get(&quot;yq_count_1&quot;))){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
	}
else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="执行文件归档，保证案例可多次执行" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
Calendar calendar = Calendar.getInstance();
calendar.add(Calendar.DATE,  -1);
String yesterday = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
vars.put(&quot;archivingDate&quot;,yesterday);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190529&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;48034958&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900004&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: {&#xd;
      	&quot;appId&quot;:&quot;000&quot;,&#xd;
      	&quot;archivingDate&quot;:${archivingDate}  		&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900004</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="平台日切_900008" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900008" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_08&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}

				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}

				else if (clist.get(i).equals(&quot;paramKey&quot;)){
					if (retval.isEmpty()){

					cmap.put(clist.get(i),&quot;&quot;);
					vars.put(clist.get(i),&quot;PLT_DATE&quot;);}
					else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
					}
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${caseName}&quot;==&quot;正例-日切时间等于当前时间&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">update abs_busidate set busi_date = ? where param_key = ?</stringProp>
              <stringProp name="queryArguments">${busiDate},${paramKey}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${paramKey}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_date</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreDate = vars.getObject(&quot;pre_date&quot;).get(0);
String querypreDate = query_PreDate.get(&quot;busi_date&quot;);
vars.put(&quot;querypreDate&quot;,querypreDate)</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900008请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900008&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${paramKey}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">post_date</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">HashMap query_PostDate = vars.getObject(&quot;post_date&quot;).get(0);
String querypostDate = query_PostDate.get(&quot;busi_date&quot;);
log.info(&quot;日切后日期：&quot;+querypostDate);


if (&quot;${respCode}&quot;.equals(&quot;00000&quot;)){
if(vars.get(&quot;busiDate&quot;).equals(querypostDate))
{

	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
}
}
else{
	if(&quot;${is_bef_sql}&quot;.equals(&quot;1&quot;)){
	if(vars.get(&quot;querypreDate&quot;).equals(querypostDate))
	{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

	}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
	}
}
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="日期查询_900011" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900011" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_11&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else if ( vars.get(&quot;caseName&quot;).equals(&quot;正例-获取平台日期&quot;)){
					vars.put(clist.get(i),&quot;PLT_DATE&quot;);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${productCode}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900011请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900011&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: ${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900011</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;respnextBusiDate;respparamKey;respextField1;respserial;respbusiDate;resplastBusiDate;respdescription;respbusiNo;respsessionNo;respholidayFlag</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body.nextBusiDate;$.iibs.resp.body.paramKey;$.iibs.resp.body.extField1;$.iibs.resp.body.serial;$.iibs.resp.body.busiDate;$.iibs.resp.body.lastBusiDate;$.iibs.resp.body.description;$.iibs.resp.body.busiNo;$.iibs.resp.body.sessionNo;$.iibs.resp.body.holidayFlag</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null;null;null;null;null;null;null;null;null;null;null;null;null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="后置逻辑判断_判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${productCode}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">post_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">HashMap queryPostresult = vars.getObject(&quot;post_result&quot;).get(0);
//String querynextBusiDate = queryPostresult.get(&quot;next_busi_date&quot;);
String queryparamKey = queryPostresult.get(&quot;param_key&quot;);
//String queryextField1 = queryPostresult.get(&quot;ext_field1&quot;);


//String queryserial = (queryPostresult.get(&quot;serial&quot;)==null) ?  queryPostresult.get(&quot;serial&quot;): queryPostresult.get(&quot;serial&quot;).toString();

String querybusiDate = queryPostresult.get(&quot;busi_date&quot;);
//String querylastBusiDate = queryPostresult.get(&quot;last_busi_date&quot;);
//String querydescription = queryPostresult.get(&quot;description&quot;);
//String querybusiNo = queryPostresult.get(&quot;busi_no&quot;);
//String querysessionNo = (queryPostresult.get(&quot;session_no&quot;)==null) ?  queryPostresult.get(&quot;session_no&quot;): queryPostresult.get(&quot;session_no&quot;).toString();
//String queryholidayFlag = queryPostresult.get(&quot;holiday_flag&quot;);



if(vars.get(&quot;respparamKey&quot;).equals(queryparamKey)&amp;&amp;vars.get(&quot;respbusiDate&quot;).equals(querybusiDate))
{

	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="节假日设置_900012-no" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900012" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_12&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
String querypreStatus = query_PreResult.get(&quot;status&quot;);
vars.put(&quot;querypreStatus&quot;,querypreStatus);
log.info(querypreStatus);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900012请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900012&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900012</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="节假日判断_900084-ing" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900084" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_84&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
//				else if ( clist.get(i).equals(&quot;wallDate&quot;) &amp;&amp; retval.length()==0){
//
//					}
				else if (clist.get(i).equals(&quot;productCode&quot;) &amp;&amp; retval.length()==0){
					vars.put(clist.get(i),&quot;PLT_DATE&quot;);
					cmap.put(clist.get(i),retval);
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
//String querypreStatus = query_PreResult.get(&quot;status&quot;);
//vars.put(&quot;querypreStatus&quot;,querypreStatus);
//log.info(querypreStatus);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900084请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900084&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900084</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;respproductCode;respwallDate;holidayFlag</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body.productCode;$.iibs.resp.body.wallDate;$.iibs.resp.body.holidayFlag</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${respwallDate},${respproductCode},${holidayFlag}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar,varchar</stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="手续费计算_900015" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900015" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_15&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query"></stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900015请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900015&quot;,&#xd;
        &quot;productCode&quot;: &quot;${productCode}&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: ${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900015</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;respFee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body.fee</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	if(vars.get(&quot;yq_respCode&quot;).equals(&quot;00000&quot;)){
		if(vars.get(&quot;yq_fee&quot;).equals(&quot;${respFee}&quot;)){
			log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
			Failure = false;
			FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;
			}
		else{
			log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
			Failure = true;
			log.info(vars.get(&quot;yq_fee&quot;));
			log.info(&quot;${respFee}&quot;);
			FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
			}
		}
	else{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;
		}
}else{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
		Failure = true;
		log.info(vars.get(&quot;yq_respMsg&quot;));
		log.info(&quot;${respMsg}&quot;);
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="后置逻辑判断_判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query"></stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query"></stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="手续费流水登记_900016" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">14</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900016" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_16&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query"></stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900016请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900016&quot;,&#xd;
        &quot;productCode&quot;: &quot;000001&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: ${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900016</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{

		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
		Failure = true;
		log.info(vars.get(&quot;yq_respMsg&quot;));
		log.info(&quot;${respMsg}&quot;);
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="后置逻辑判断_判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${pltDate},${pltSerial}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar</stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="前置删除测试数据和清理缓存" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="redis_ip" elementType="Argument">
              <stringProp name="Argument.name">redis_ip</stringProp>
              <stringProp name="Argument.value">10.20.39.63</stringProp>
              <stringProp name="Argument.desc">redis地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="redis_port" elementType="Argument">
              <stringProp name="Argument.name">redis_port</stringProp>
              <stringProp name="Argument.value">6379</stringProp>
              <stringProp name="Argument.desc">redis端口</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="redis_passwd" elementType="Argument">
              <stringProp name="Argument.name">redis_passwd</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">redis密码</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
          <stringProp name="dataSource">${db}</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">agent.123</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">${db}</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">delete from abs_busi where description = &apos;测试说明&apos;;
delete from abs_company where unit_name like &apos;%测试单位%&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
          <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;

String host = &quot;${redis_ip}&quot;; //redis服务地址
log.info(host);
int port = ${redis_port}; //端口
log.info(port.toString());
String password = &quot;${redis_passwd}&quot;; //redis密码
log.info(password);
Jedis jedis = new Jedis(host, port);
if(password.length()!=0){
	jedis.auth(password);
}

//删除所有数据库的所有键值
String res = jedis.flushAll();
log.info(&quot;删除port1所有键值后的反应:&quot;+ res);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="业务信息新增_900041" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">19</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900041" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_41&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
String querypreFlag = query_PreResult.get(&quot;start_stop_flag&quot;);
vars.put(&quot;querypreFlag&quot;,querypreFlag);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900041请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900041&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900041</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;rpbusiName;rpunitNo;rpbusiNo;rpproductCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus; $.iibs.resp.body.busiName;$.iibs.resp.body.unitNo;$.iibs.resp.body.busiNo;$.iibs.resp.body.productCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${rpbusiNo},${rpbusiName},${rpunitNo},${rpproductCode},${rpunitNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar,varchar,varchar,varchar</stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="业务信息变更_900042" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900042" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_42&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${busiNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">company_no</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;company_no&quot;).get(0);
String company_no = query_PreResult.get(&quot;unit_no&quot;);
vars.put(&quot;unit_no&quot;,company_no);
log.info(unit_no+&quot;11111111111111111111111111111111&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900042请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900042&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900042</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${busiNo},${unit_no}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar</stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="业务信息查询_900043" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">16</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900043" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_43&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${busiNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">company_no</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;company_no&quot;).get(0);
String company_no = query_PreResult.get(&quot;unit_no&quot;);
vars.put(&quot;unit_no&quot;,company_no);
log.info(unit_no+&quot;11111111111111111111111111111111&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900043请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900043&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900043</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;pageCount;total;busiInfo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body.pageCount;$.iibs.resp.body.total;$.iibs.resp.body.busiInfo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound;notfound;[]</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;



int yesize = Integer.parseInt(&quot;${pageSize}&quot;); //接口中的页大小
int yenum = Integer.parseInt(&quot;${currPage}&quot;); //接口中的页号

int yetotal = Integer.parseInt(&quot;${pageCount}&quot;);//响应返回的页总数
int resptotal = Integer.parseInt(&quot;${total}&quot;);//响应返回的满足条件的查询结果数

int querytotal = Integer.parseInt(&quot;${sql_count_1}&quot;);//查询数据库结果数

int yq_yetotal = Math.ceil((float)querytotal/yesize);

if (resptotal == querytotal &amp;&amp; yetotal == yq_yetotal){

	String listStr = vars.get(&quot;busiInfo&quot;);
	JSONArray listJson = JSONArray.parseArray(listStr);
	int lisize = listJson.size();
	if(lisize != yesize &amp;&amp; lisize != (querytotal%yesize)){

		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;);
		Failure = true;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;;
		}
	else if(&quot;1&quot;.equals(vars.get(&quot;queryType&quot;))){
		for(int i = 0; i &lt; listJson.size(); i++){
			JSONObject json = listJson.getJSONObject(i);
			if (json.containsKey(&quot;company&quot;)){
				log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
				Failure = false;
				FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
				}
				else{
				log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;);
				Failure = true;
				FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;;
				log.info(&quot;222222222222222222222222222222222222222222222&quot;);
				break;
				}
			}
		}
	else{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;

		}
}
else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;;
	log.info(&quot;3333333333333333333333333333333333333333333333333&quot;);
}




</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="业务列表获取_900068" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">11</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900068" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_68&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( &quot;&quot;.equals(retval)) {
					if(&quot;branch&quot;.equals(clist.get(i)))
						vars.put(clist.get(i),&quot;\&quot;\&quot;&quot;);

					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="false">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="false">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
String querypreFlag = query_PreResult.get(&quot;start_stop_flag&quot;);
vars.put(&quot;querypreFlag&quot;,querypreFlag);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900068请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900068&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: ${branch},&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900068</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;rpbusiName;rpunitNo;rpbusiNo;rpproductCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus; $.iibs.resp.body.busiName;$.iibs.resp.body.unitNo;$.iibs.resp.body.busiNo;$.iibs.resp.body.productCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="false">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${rpbusiNo},${rpbusiName},${rpunitNo},${rpproductCode},${rpunitNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar,varchar,varchar,varchar</stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="业务列表获取-模式2_900071" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">8</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900071" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_71&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( &quot;&quot;.equals(retval)) {
					if(&quot;branch&quot;.equals(clist.get(i)))
						vars.put(clist.get(i),&quot;\&quot;\&quot;&quot;);

					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="false">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="false">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
String querypreFlag = query_PreResult.get(&quot;start_stop_flag&quot;);
vars.put(&quot;querypreFlag&quot;,querypreFlag);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900071请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900071&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: ${branch},&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900071</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;rpbusiName;rpunitNo;rpbusiNo;rpproductCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus; $.iibs.resp.body.busiName;$.iibs.resp.body.unitNo;$.iibs.resp.body.busiNo;$.iibs.resp.body.productCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="false">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${rpbusiNo},${rpbusiName},${rpunitNo},${rpproductCode},${rpunitNo}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar,varchar,varchar,varchar,varchar</stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">log.info(&quot;预期sql结果是：&quot;+vars.get(&quot;yq_count&quot;));
String yq_count = vars.get(&quot;yq_count&quot;);
int i = 1;
int iflag = 1;
for (String yqcout: yq_count.split(&quot;\\|&quot;)){
	String db_count = &quot;sql_count_&quot;+i;
	if ( !(yqcout.equals(vars.get(db_count))) ){
		log.info(&quot;第&quot;+i+&quot;条sql检查不通过，预期结果是：&quot;+yqcout+&quot;,实际结果是：&quot;+vars.get(db_count) );
		Failure = true;
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;第&quot;+i+&quot;条sql查询与预期不一致，Failure&quot;;
		iflag = 0;
		break;
	}
	i++;
}
if (iflag == 1){
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="数据库手续费基础数据维护" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
          <stringProp name="dataSource">${db}</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">agent.123</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入初始日终配置数据" enabled="true">
          <stringProp name="dataSource">${db}</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">delete from ABS_FEEPARAM where maintain_teller=&apos;wangyj&apos;;
delete from ABS_PRODFEERELA where maintain_teller=&apos;wangyj&apos;;
delete from abs_prodfeectrl where maintain_teller=&apos;wangyj&apos;;
delete from ABS_FEESERIAL where description=&apos;说明&apos;;
INSERT INTO ABS_PRODFEERELA (seq_no, product_code, ctrl_cond1, ctrl_cond2, ctrl_cond3, ctrl_cond4, ctrl_cond5, rate_id, effective_date, invalid_date, description, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (1, &apos;000001&apos;, &apos;beps&apos;, &apos;beps&apos;, &apos;beps&apos;, &apos;beps&apos;, &apos;beps&apos;, &apos;auto_rate_beps&apos;, &apos;20190101&apos;, &apos;99999999&apos;, &apos;说明&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO ABS_PRODFEERELA (seq_no, product_code, ctrl_cond1, ctrl_cond2, ctrl_cond3, ctrl_cond4, ctrl_cond5, rate_id, effective_date, invalid_date, description, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (2, &apos;000001&apos;, &apos;epcc&apos;, &apos;epcc&apos;, &apos;epcc&apos;, &apos;epcc&apos;, &apos;epcc&apos;, &apos;auto_rate_epcc&apos;, &apos;20190101&apos;, &apos;99999999&apos;, &apos;说明&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO ABS_PRODFEERELA (seq_no, product_code, ctrl_cond1, ctrl_cond2, ctrl_cond3, ctrl_cond4, ctrl_cond5, rate_id, effective_date, invalid_date, description, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (3, &apos;000001&apos;, &apos;hvps&apos;, &apos;hvps&apos;, &apos;hvps&apos;, &apos;hvps&apos;, &apos;hvps&apos;, &apos;auto_rate_hvps&apos;, &apos;20190101&apos;, &apos;99999999&apos;, &apos;说明&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO ABS_PRODFEERELA (seq_no, product_code, ctrl_cond1, ctrl_cond2, ctrl_cond3, ctrl_cond4, ctrl_cond5, rate_id, effective_date, invalid_date, description, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (4, &apos;000001&apos;, &apos;ibps&apos;, &apos;ibps&apos;, &apos;ibps&apos;, &apos;ibps&apos;, &apos;ibps&apos;, &apos;auto_rate_ibps&apos;, &apos;20190101&apos;, &apos;99999999&apos;, &apos;说明&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO ABS_PRODFEERELA (seq_no, product_code, ctrl_cond1, ctrl_cond2, ctrl_cond3, ctrl_cond4, ctrl_cond5, rate_id, effective_date, invalid_date, description, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (5, &apos;000001&apos;, &apos;nxy&apos;, &apos;nxy&apos;, &apos;nxy&apos;, &apos;nxy&apos;, &apos;nxy&apos;, &apos;auto_rate_nxy&apos;, &apos;20190101&apos;, &apos;99999999&apos;, &apos;说明&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO ABS_PRODFEERELA (seq_no, product_code, ctrl_cond1, ctrl_cond2, ctrl_cond3, ctrl_cond4, ctrl_cond5, rate_id, effective_date, invalid_date, description, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (6, &apos;000001&apos;, &apos;test&apos;, &apos;test&apos;, &apos;test&apos;, &apos;test&apos;, &apos;test&apos;, &apos; &apos;, &apos;20190101&apos;, &apos;99999999&apos;, &apos;说明&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000001&apos;, 1, &apos;ctrlCond1&apos;, &apos;控制条件1&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000001&apos;, 2, &apos;ctrlCond2&apos;, &apos;控制条件2&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000001&apos;, 3, &apos;ctrlCond3&apos;, &apos;控制条件3&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000001&apos;, 4, &apos;ctrlCond4&apos;, &apos;控制条件4&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000001&apos;, 5, &apos;ctrlCond5&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000002&apos;, 0, &apos;&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000003&apos;, 1, &apos;ctrlCond1&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000003&apos;, 2, &apos;ctrlCond2&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000003&apos;, 3, &apos;ctrlCond3&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000003&apos;, 4, &apos;ctrlCond4&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000003&apos;, 5, &apos;ctrlCond5&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO abs_prodfeectrl (product_code, seq_no, attr_node_name, attr_desc, attr_source, attr_source_name, maintain_branch, maintain_teller, maintain_dttm, ext_field1, ext_field2) VALUES (&apos;000003&apos;, 6, &apos;ctrlCond6&apos;, &apos;控制条件5&apos;, &apos;1&apos;, &apos;abs_channel:channel:channel_name&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;, &apos;扩展1&apos;, &apos;扩展2&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_1&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 1.000000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_1&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_10&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.750000, &apos;1&apos;, 10.500000, null, null, null, null, null, &apos;测试说明_10&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_11&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, 100.00, 2.50, &apos;1&apos;, 2.750000, &apos;1&apos;, 10.750000, null, null, null, null, null, &apos;测试说明_11&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_12&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, 10.00, 0.50, &apos;1&apos;, 3.750000, &apos;0&apos;, 10.000000, null, null, null, null, null, &apos;测试说明_12&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_13&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, 50.00, 0.50, &apos;1&apos;, 3.750000, &apos;1&apos;, 5.000000, null, null, null, null, null, &apos;测试说明_13&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_14&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, 300.00, 3.00, &apos;2&apos;, 2.500000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_14&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_15&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_15&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_16&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.500000, &apos;0&apos;, 0.000000, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_16&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_17&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 0.500000, &apos;0&apos;, 0.000000, &apos;2&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_17&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_18&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 1.500000, &apos;0&apos;, null, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_18&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_19&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 0.500000, &apos;0&apos;, null, &apos;2&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_19&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_2&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 1.000000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_2&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_20&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 3.000000, &apos;0&apos;, null, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_20&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_20&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.500000, &apos;0&apos;, null, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, &apos;10&apos;, &apos;20&apos;, &apos;测试说明_20&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_21&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, null, &apos;2&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_21&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_21&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.350000, &apos;0&apos;, null, &apos;2&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;2000&apos;, &apos;测试说明_21&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_22&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 3.000000, &apos;0&apos;, null, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_22&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_22&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.500000, &apos;0&apos;, null, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;10&apos;, &apos;20&apos;, &apos;测试说明_22&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_22&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.000000, &apos;0&apos;, null, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;20&apos;, &apos;30&apos;, &apos;测试说明_22&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_23&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, null, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_23&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_23&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.350000, &apos;0&apos;, null, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;2000&apos;, &apos;测试说明_23&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_23&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.300000, &apos;0&apos;, null, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2000&apos;, &apos;3000&apos;, &apos;测试说明_23&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_24&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 5.000000, &apos;1&apos;, 3.500000, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_24&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_24&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 3.500000, &apos;1&apos;, 3.500000, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;10&apos;, &apos;20&apos;, &apos;测试说明_24&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_24&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.000000, &apos;1&apos;, 3.500000, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;20&apos;, &apos;30&apos;, &apos;测试说明_24&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_25&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 3.500000, &apos;2&apos;, 0.500000, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_25&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_25&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.500000, &apos;2&apos;, 0.500000, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;10&apos;, &apos;20&apos;, &apos;测试说明_25&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_25&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 2.000000, &apos;2&apos;, 0.500000, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;20&apos;, &apos;30&apos;, &apos;测试说明_25&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_26&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;1&apos;, 5.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_26&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_26&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.350000, &apos;1&apos;, 5.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;2000&apos;, &apos;测试说明_26&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_26&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.300000, &apos;1&apos;, 5.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2000&apos;, &apos;3000&apos;, &apos;测试说明_26&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_27&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;2&apos;, 5.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_27&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_27&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.350000, &apos;2&apos;, 5.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;2000&apos;, &apos;测试说明_27&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_27&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.300000, &apos;2&apos;, 5.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2000&apos;, &apos;3000&apos;, &apos;测试说明_27&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_28&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, 10.00, 3.00, &apos;2&apos;, 0.500000, &apos;0&apos;, 0.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_28&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_28&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, 10.00, 3.00, &apos;2&apos;, 0.400000, &apos;0&apos;, 0.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;2000&apos;, &apos;测试说明_28&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_28&apos;, 3, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, 10.00, 3.00, &apos;2&apos;, 0.300000, &apos;0&apos;, 0.000000, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2000&apos;, &apos;3000&apos;, &apos;测试说明_28&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_29&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, null, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;10&apos;, &apos;测试说明_29&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_29&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.400000, &apos;0&apos;, null, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;10&apos;, &apos;20&apos;, &apos;测试说明_29&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_3&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, null, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_3&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_30&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 0.500000, &apos;0&apos;, null, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;测试说明_30&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_30&apos;, 2, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 0.400000, &apos;0&apos;, null, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;1000&apos;, &apos;2000&apos;, &apos;测试说明_30&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190902&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_31&apos;, 1, &apos;2&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_31&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_32&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;3&apos;, 0.500000, &apos;0&apos;, 1.000000, null, null, null, null, null, &apos;测试说明32&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_33&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, 0.000000, &apos;2&apos;, &apos;2&apos;, &apos;0&apos;, &apos;0&apos;, &apos;3000&apos;, &apos;测试说明33&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_34&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, null, &apos;3&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;3000&apos;, &apos;测试说明34&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_35&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, null, &apos;3&apos;, &apos;0&apos;, &apos;1&apos;, &apos;0&apos;, &apos;3000&apos;, &apos;测试说明35&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_36&apos;, 1, &apos;1&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, null, &apos;2&apos;, &apos;0&apos;, &apos;2&apos;, &apos;0&apos;, &apos;3000&apos;, &apos;测试说明36&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_4&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 1.250000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_4&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_5&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.550000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_5&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_6&apos;, 1, &apos;0&apos;, &apos;1&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 25.000000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_6&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_7&apos;, 1, &apos;0&apos;, &apos;1&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;测试说明_7&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190831&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_8&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 5.370000, &apos;1&apos;, 2.750000, null, null, null, null, null, &apos;测试说明_8&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_9&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;1&apos;, 4.750000, &apos;2&apos;, 17.250000, null, null, null, null, null, &apos;测试说明_9&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190901&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_beps&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.500000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;小额支付手续费&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_epcc&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.400000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;网联支付手续费&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_hvps&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.300000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;大额支付手续费&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_ibps&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.200000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;超网手续费&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
INSERT INTO ABS_FEEPARAM (rate_id, seq_no, float_flag, io_charge_flag, limit_ctrl_flag, max_amt, min_amt, calc_param_type, calc_param, discount_flag, deducation_param, float_type, progressive_flag, incl_uplimit_flag, start_param, end_param, description, maintain_branch, maintain_teller, maintain_dttm) VALUES (&apos;auto_rate_nxy&apos;, 1, &apos;0&apos;, &apos;0&apos;, &apos;1&apos;, null, null, &apos;2&apos;, 0.100000, &apos;0&apos;, 0.000000, null, null, null, null, null, &apos;农信银手续费&apos;, &apos;HUNDSUN&apos;, &apos;wangyj&apos;, &apos;20190903&apos;);
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="手续费基础报表_900017" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">13</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900017" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_17&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else if(retval.equals(&quot;&quot;)){
					vars.put(clist.get(i),retval);
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
					}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query"></stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900017请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900017&quot;,&#xd;
        &quot;productCode&quot;: &quot;000001&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: ${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900017</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;pageCount;total;reportInfo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body.pageCount;$.iibs.resp.body.total;$.iibs.resp.body.reportInfo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{

		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
		Failure = true;
		log.info(vars.get(&quot;yq_respMsg&quot;));
		log.info(&quot;${respMsg}&quot;);
		FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="后置逻辑判断_判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">sql_count</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;



int yesize = Integer.parseInt(&quot;${pageSize}&quot;); //接口中的页大小
int yenum = Integer.parseInt(&quot;${currPage}&quot;); //接口中的页号

int yetotal = Integer.parseInt(&quot;${pageCount}&quot;);//响应返回的页总数
int resptotal = Integer.parseInt(&quot;${total}&quot;);//响应返回的满足条件的查询结果数

int querytotal = Integer.parseInt(&quot;${sql_count_1}&quot;);//查询数据库结果数

int yq_yetotal = Math.ceil((float)querytotal/yesize);

if (resptotal == querytotal &amp;&amp; yetotal == yq_yetotal){

	String listStr = vars.get(&quot;reportInfo&quot;);
	JSONArray listJson = JSONArray.parseArray(listStr);
	int lisize = listJson.size();
	if(lisize != yesize &amp;&amp; lisize != (querytotal%yesize)){

		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;);
		Failure = true;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;;
		}
	else if(&quot;1&quot;.equals(vars.get(&quot;queryType&quot;))){
		for(int i = 0; i &lt; listJson.size(); i++){
			JSONObject json = listJson.getJSONObject(i);
			if (json.containsKey(&quot;company&quot;)){
				log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
				Failure = false;
				FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
				}
				else{
				log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;);
				Failure = true;
				FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;;
				break;
				}
			}
		}
	else{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;sql查询与预期一致，Success&quot;;
		}
}
else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;结果与预期不一致，Failure&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="统计报表配置数据维护" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
          <stringProp name="dataSource">${db}</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">agent.123</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入初始日终配置数据" enabled="true">
          <stringProp name="dataSource">${db}</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">delete from ABS_TRANSCOUNTCONF where description like &quot;auto_%&quot;;



INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000001&apos;, &apos;auto_1&apos;, 0, null, null, null, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000002&apos;, &apos;auto_2&apos;, 0, null, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000003&apos;, &apos;auto_3&apos;, 1, 1, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000004&apos;, &apos;auto_4&apos;, 1, 2, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000005&apos;, &apos;auto_5&apos;, 1, 3, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000006&apos;, &apos;auto_6&apos;, 1, 4, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000007&apos;, &apos;auto_7&apos;, 1, 5, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000008&apos;, &apos;auto_8&apos;, 1, 6, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000009&apos;, &apos;auto_9&apos;, 1, 7, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000010&apos;, &apos;auto_10&apos;, 1, 8, null, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000011&apos;, &apos;auto_11&apos;, 2, 1, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000012&apos;, &apos;auto_12&apos;, 2, 1, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000013&apos;, &apos;auto_13&apos;, 2, 1, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000014&apos;, &apos;auto_14&apos;, 2, 1, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000015&apos;, &apos;auto_15&apos;, 2, 1, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000016&apos;, &apos;auto_16&apos;, 2, 1, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000017&apos;, &apos;auto_17&apos;, 2, 1, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000018&apos;, &apos;auto_18&apos;, 2, 1, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000019&apos;, &apos;auto_19&apos;, 2, 2, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000020&apos;, &apos;auto_20&apos;, 2, 2, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000021&apos;, &apos;auto_21&apos;, 2, 2, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000022&apos;, &apos;auto_22&apos;, 2, 2, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000023&apos;, &apos;auto_23&apos;, 2, 2, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000024&apos;, &apos;auto_24&apos;, 2, 2, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000025&apos;, &apos;auto_25&apos;, 2, 2, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000026&apos;, &apos;auto_26&apos;, 2, 2, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000027&apos;, &apos;auto_27&apos;, 2, 3, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000028&apos;, &apos;auto_28&apos;, 2, 3, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000029&apos;, &apos;auto_29&apos;, 2, 3, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000030&apos;, &apos;auto_30&apos;, 2, 3, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000031&apos;, &apos;auto_31&apos;, 2, 3, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000032&apos;, &apos;auto_32&apos;, 2, 3, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000033&apos;, &apos;auto_33&apos;, 2, 3, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000034&apos;, &apos;auto_34&apos;, 2, 3, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000035&apos;, &apos;auto_35&apos;, 2, 4, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000036&apos;, &apos;auto_36&apos;, 2, 4, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000037&apos;, &apos;auto_37&apos;, 2, 4, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000038&apos;, &apos;auto_38&apos;, 2, 4, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000039&apos;, &apos;auto_39&apos;, 2, 4, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000040&apos;, &apos;auto_40&apos;, 2, 4, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000041&apos;, &apos;auto_41&apos;, 2, 4, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000042&apos;, &apos;auto_42&apos;, 2, 4, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000043&apos;, &apos;auto_43&apos;, 2, 5, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000044&apos;, &apos;auto_44&apos;, 2, 5, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000045&apos;, &apos;auto_45&apos;, 2, 5, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000046&apos;, &apos;auto_46&apos;, 2, 5, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000047&apos;, &apos;auto_47&apos;, 2, 5, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000048&apos;, &apos;auto_48&apos;, 2, 5, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000049&apos;, &apos;auto_49&apos;, 2, 5, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000050&apos;, &apos;auto_50&apos;, 2, 5, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000051&apos;, &apos;auto_51&apos;, 2, 6, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000052&apos;, &apos;auto_52&apos;, 2, 6, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000053&apos;, &apos;auto_53&apos;, 2, 6, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000054&apos;, &apos;auto_54&apos;, 2, 6, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000055&apos;, &apos;auto_55&apos;, 2, 6, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000056&apos;, &apos;auto_56&apos;, 2, 6, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000057&apos;, &apos;auto_57&apos;, 2, 6, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000058&apos;, &apos;auto_58&apos;, 2, 6, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000059&apos;, &apos;auto_59&apos;, 2, 7, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000060&apos;, &apos;auto_60&apos;, 2, 7, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000061&apos;, &apos;auto_61&apos;, 2, 7, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000062&apos;, &apos;auto_62&apos;, 2, 7, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000063&apos;, &apos;auto_63&apos;, 2, 7, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000064&apos;, &apos;auto_64&apos;, 2, 7, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000065&apos;, &apos;auto_65&apos;, 2, 7, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000066&apos;, &apos;auto_66&apos;, 2, 7, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000067&apos;, &apos;auto_67&apos;, 2, 8, 1, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000068&apos;, &apos;auto_68&apos;, 2, 8, 2, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000069&apos;, &apos;auto_69&apos;, 2, 8, 3, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000070&apos;, &apos;auto_70&apos;, 2, 8, 4, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000071&apos;, &apos;auto_71&apos;, 2, 8, 5, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000072&apos;, &apos;auto_72&apos;, 2, 8, 6, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000073&apos;, &apos;auto_73&apos;, 2, 8, 7, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000074&apos;, &apos;auto_74&apos;, 2, 8, 8, &apos;20190801085821795&apos;, &apos;0&apos;);
INSERT INTO ABS_TRANSCOUNTCONF (statistics_sign, description, dimension, code_type, code_type2, calc_timestamp, status) VALUES (&apos;0000000000000075&apos;, &apos;auto_75&apos;, 0, null, null, &apos;20190801&apos;, &apos;0&apos;);
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="服务量统计-901060" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901060" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901060请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20191008&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901060&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;: {&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901060</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="协议量统计-901061" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901061" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_61&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else if ( retval.equals(&quot;DATE-1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  -1);
					String yesterday = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),yesterday);
					vars.put(clist.get(i),yesterday);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+yesterday);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901061请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190612&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901061&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901061</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="服务量趋势查询-901062" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">8</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901062" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_62&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901062请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190612&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901062&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901062</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="服务量汇总查询-901063" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">12</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901063" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_63&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else if ( retval.equals(&quot;YEAR&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  0);
					String year = new SimpleDateFormat( &quot;yyyy&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),year);
					vars.put(clist.get(i),year);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+year);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901063请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190612&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901063&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901063</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="协议签约趋势查询-901064" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901064" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_64&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901064请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190612&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901064&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901064</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="协议签约统计信息查询-901065" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901065" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_65&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  0);
					String today = new SimpleDateFormat( &quot;yyyyMMdd&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),today);
					vars.put(clist.get(i),today);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+today);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901065请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190612&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901065&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901065</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="序列获取_900082" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_900082" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_82&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)),&quot;UTF-8&quot;);

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else if ( retval.equals(&quot;DATE+1&quot;)) {
					Calendar calendar = Calendar.getInstance();
					calendar.add(Calendar.DATE,  1);
					String tomorrow = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot;).format(calendar.getTime());
					cmap.put(clist.get(i),tomorrow);
					vars.put(clist.get(i),tomorrow);
					printMyLog(&quot;=================SimpleDateFormat===end,formate=&quot;+tomorrow);
					}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="前置逻辑判断_是否获取请求前数据库状态" enabled="true">
            <stringProp name="IfController.condition">&quot;${is_bef_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求前数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${bef_sql}</stringProp>
              <stringProp name="queryArguments">${paraKey}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">pre_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="前置数据库状态获取" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">HashMap query_PreResult = vars.getObject(&quot;pre_result&quot;).get(0);
int querypreValue = query_PreResult.get(&quot;curr_value&quot;);
vars.put(&quot;querypreValue&quot;,querypreValue.toString());
log.info(&quot;if前逻辑控制控制&quot;+querypreValue);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="900082请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;900082&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_900082</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg;serviceStatus;postSequence</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg;$.iibs.resp.head.serviceStatus;$.iibs.resp.body.sequence</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound;notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断http请求响应断言是否成功" enabled="true">
            <stringProp name="IfController.condition">&quot;${respCode}&quot;==&quot;${yq_respCode}&quot; &amp;&amp; &quot;${respMsg}&quot;==&quot;${yq_respMsg}&quot;&amp;&amp;&quot;${is_aft_sql}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="HTTP请求后数据库状态查询" enabled="true">
              <stringProp name="dataSource">${db}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">${aft_sql}</stringProp>
              <stringProp name="queryArguments">${paraKey}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">post_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库响应断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">
HashMap queryPostresult = vars.getObject(&quot;post_result&quot;).get(0);
int querypostValue = queryPostresult.get(&quot;curr_value&quot;);
log.info(&quot;序列获取成功后的当前值&quot;+querypostValue);

int step_value = queryPostresult.get(&quot;step_value&quot;);
log.info(&quot;步进值&quot;+step_value);

int min_value = queryPostresult.get(&quot;min_value&quot;);
log.info(&quot;最小值&quot;+min_value);

int max_value = queryPostresult.get(&quot;max_value&quot;);
log.info(&quot;最大值&quot;+max_value);

String align_type = queryPostresult.get(&quot;align_type&quot;);
log.info(&quot;对齐方式&quot;+align_type);

int content_length = queryPostresult.get(&quot;content_length&quot;);
log.info(&quot;内容长度&quot;+content_length);

if (&quot;${respCode}&quot;.equals(&quot;00000&quot;)){
int yq_Value = ${querypreValue}+ step_value;
//log.info(&quot;预期值&quot;+yq_Value);

if(yq_Value &gt; max_value &amp;&amp; step_value &gt; 0) {
	yq_Value = min_value;
}
if(yq_Value &lt; min_value &amp;&amp; step_value &lt; 0) {
	yq_Value = max_value;
}
String yq_Seq = yq_Value.toString();

log.info(&quot;预期序列号&quot;+yq_Seq);

if (queryPostresult.get(&quot;fill_char&quot;) != null){
	int length = content_length - yq_Seq.length();
	if(length&gt;0){
		if (align_type.equals(&quot;R&quot;)){
			for(int i = 0;i&lt;length;i++)
				yq_Seq=&quot;0&quot;+yq_Seq;
			}else{
			for(int i = 0;i&lt;length;i++)
				yq_Seq=yq_Seq+&quot;0&quot;;
			}

		}
	log.info(yq_Seq);
	if(&quot;${postSequence}&quot;.equals(yq_Seq))
	{

		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

	}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
	}
}
}
else{
	if(vars.get(&quot;querypreValue&quot;).equals(querypostValue))
	{
		log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;);
		Failure = false;
		FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,数据库响应信息预期一致，Success&quot;;

	}else{
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，数据库响应信息与预期不一致，Failure&quot;);
	Failure = true;
	FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，数据库响应与预期不一致，Failure&quot;;
	}
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="文件信息获取_901101" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901101" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_101&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901101请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901101&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901101</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="映射信息获取_901102" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901102" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_102&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901102请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901102&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901102</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="响应码映射信息获取_901103" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="flow_abs_901103" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">99</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loopcount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_mysql" enabled="true">
            <stringProp name="dataSource">${db}</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://10.20.39.63:3306/agent_mysql?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false&amp;allowMultiQueries=true</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">agent.123</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell读取csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FileReader;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.math.BigDecimal;

/*
 * static int canshu_num = ${csv_num};//参数个数+1个案例名称
*/
public void printMyLog( String sp ){
	static int log_flag = 1;
	if ( log_flag == 1 ){
		log.info(sp);
	}
}

public void getCsvDate(List clist,Map camp){

	printMyLog(&quot;getcsvdate start=======从CSV文件中获取第一行数据，是参数字段名称数据&quot;);
	FileInputStream fis=new FileInputStream(vars.get(&quot;csv_json_path_103&quot;));
	InputStreamReader isr=new InputStreamReader(fis,&quot;utf8&quot;);
	BufferedReader reader=new BufferedReader(isr);
	//BufferedReader reader = new BufferedReader(new FileReader(vars.get(&quot;csv_json_path&quot;)));

	String line = null;

	int refilenum = 0;
	while( (line=reader.readLine())!=null ){
		String Srefilenum = refilenum+&quot;&quot;;
		printMyLog(&quot;Srefilenum=====：&quot;+Srefilenum);

		if ( refilenum == 0 ){//第一行作为字段
			printMyLog(&quot;CSV文件第一行的内容是=======&quot;+line);
			//line = line.substring(3,size(line));   //为什么要去掉前3个？因为有BOM？
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;第一行分割出来的string是：&quot;+retval);
				clist.add(retval);
			}
		}

		if( Srefilenum.equals(vars.get(&quot;loopcount&quot;))){
			int i = 0;
			String retva ;
			for (String retval: line.split(&quot;,&quot;)){
				printMyLog(&quot;业务数据分割出来的string是：&quot;+retval);

				/*
	 			* 将指定的字段的参数转成int类型

				for (String retv: ex_2_int_list.split(&quot;,&quot;)){
					printMyLog(&quot;分割出来的string是：&quot;+retv);
					if (clist.get(i).equals(retv)){
						printMyLog(&quot;该字段需要转成int类型，转换前：&quot;+retval);
						BigDecimal bd = new BigDecimal(retval);
						String new_val = bd.intValue()+&quot;&quot;;
						vars.put(retval,new_val);
						retval = new_val;
						printMyLog(&quot;转换后：&quot;+vars.get(retval));
					}
				}
				*/


				if(clist.get(i).equals(&quot;caseName&quot;)||clist.get(i).equals(&quot;yq_respMsg&quot;)||clist.get(i).equals(&quot;yq_serviceStatus&quot;)||clist.get(i).equals(&quot;is_bef_sql&quot;)||clist.get(i).equals(&quot;bef_sql&quot;)||clist.get(i).equals(&quot;is_aft_sql&quot;)||clist.get(i).equals(&quot;aft_sql&quot;)||clist.get(i).equals(&quot;yq_count&quot;)){
					vars.put(clist.get(i),retval);
				}
				else if(clist.get(i).equals(&quot;yq_respCode&quot;)){
					retva = retval.replace(&quot;\t&quot;,&quot;&quot;);  //造csv时，为了防止数字科学计数法，所以加了\t
					vars.put(clist.get(i),retva);
				}
				else{
					cmap.put(clist.get(i),retval);
					vars.put(clist.get(i),retval);
				}
				i++;
			}
			break;
		}
		refilenum++;
	}
	reader.close();
}

Map cmap = new HashMap();
List clist = new ArrayList();


log.info(&quot;测试开始&quot;);

getCsvDate(clist,cmap);

JSONObject json = new JSONObject(cmap);
String req_body = JSON.toJSONString(json);
log.info(&quot;req_body的结果是：&quot; + req_body);
vars.put(&quot;req_body&quot;,req_body);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="901103请求" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;iibs&quot;: {&#xd;
    &quot;req&quot;: {&#xd;
      &quot;head&quot;: {&#xd;
        &quot;reqSysCode&quot;: &quot;&quot;,&#xd;
        &quot;reqTransdate&quot;: &quot;20190508&quot;,&#xd;
        &quot;reqTranstime&quot;: &quot;&quot;,&#xd;
        &quot;reqSerial&quot;: &quot;00000001&quot;,&#xd;
        &quot;appId&quot;: &quot;001&quot;,&#xd;
        &quot;channel&quot;:&quot;201&quot;,&#xd;
        &quot;transCode&quot;: &quot;901103&quot;,&#xd;
        &quot;productCode&quot;: &quot;6008801&quot;,&#xd;
        &quot;busiNo&quot;: &quot;&quot;,&#xd;
        &quot;branch&quot;: &quot;0768&quot;,&#xd;
        &quot;teller&quot;: &quot;1&quot;,&#xd;
        &quot;areaCode&quot;: &quot;1&quot;,&#xd;
        &quot;grantBranch&quot;: &quot;1&quot;,&#xd;
        &quot;grantTeller&quot;: &quot;1&quot;,&#xd;
        &quot;version&quot;: &quot;1&quot;,&#xd;
        &quot;terminalCode&quot;: &quot;1&quot;,&#xd;
        &quot;deviceType&quot;: &quot;1&quot;,&#xd;
        &quot;certId&quot;: &quot;1&quot;,&#xd;
        &quot;charset&quot;: &quot;1&quot;,&#xd;
        &quot;mac&quot;: &quot;1&quot;,&#xd;
        &quot;sign&quot;: &quot;1&quot;,&#xd;
        &quot;ipAddr&quot;: &quot;1&quot;&#xd;
      },&#xd;
      &quot;body&quot;:${req_body}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">flowservice/json/flow_abs_901103</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json响应结果提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">respCode;respMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iibs.resp.head.respCode;$.iibs.resp.head.respMsg</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">notfound;notfound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="http请求响应断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">if( vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)  &amp;&amp; vars.get(&quot;yq_respMsg&quot;).equals(&quot;${respMsg}&quot;) )
{
	log.info((vars.get(&quot;yq_respCode&quot;).equals(&quot;${respCode}&quot;)).toString());
	log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;);
	Failure = false;
	FailureMessage = &quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;执行成功,HTTP响应信息预期一致，Success&quot;;

}else{
log.info(&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;案例执行失败，HTTP响应信息与预期不一致，Failure&quot;);
Failure = true;
FailureMessage =&quot;案例:&lt;&quot;+vars.get(&quot;caseName&quot;)+&quot;&gt;,执行失败，HTTP响应与预期不一致，Failure&quot;;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
